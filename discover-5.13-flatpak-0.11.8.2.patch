diff -up discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp.omv~ discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp
--- discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp.omv~	2018-06-13 23:11:03.555275111 +0200
+++ discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp	2018-06-13 23:11:48.319272644 +0200
@@ -1188,11 +1188,11 @@ Transaction* FlatpakBackend::installAppl
         return nullptr;
     }
 
-    FlatpakTransaction *transaction = nullptr;
+    DiscoverFlatpakTransaction *transaction = nullptr;
     FlatpakInstallation *installation = resource->installation();
 
     if (resource->propertyState(FlatpakResource::RequiredRuntime) == FlatpakResource::NotKnownYet && resource->type() == FlatpakResource::DesktopApp) {
-        transaction = new FlatpakTransaction(resource, Transaction::InstallRole, true);
+        transaction = new DiscoverFlatpakTransaction(resource, Transaction::InstallRole, true);
         connect(resource, &FlatpakResource::propertyStateChanged, [resource, transaction, this] (FlatpakResource::PropertyKind kind, FlatpakResource::PropertyState state) {
             if (kind != FlatpakResource::RequiredRuntime) {
                 return;
@@ -1209,13 +1209,13 @@ Transaction* FlatpakBackend::installAppl
     } else {
         FlatpakResource *runtime = getRuntimeForApp(resource);
         if (runtime && !runtime->isInstalled()) {
-            transaction = new FlatpakTransaction(resource, runtime, Transaction::InstallRole);
+            transaction = new DiscoverFlatpakTransaction(resource, runtime, Transaction::InstallRole);
         } else {
-            transaction = new FlatpakTransaction(resource, Transaction::InstallRole);
+            transaction = new DiscoverFlatpakTransaction(resource, Transaction::InstallRole);
         }
     }
 
-    connect(transaction, &FlatpakTransaction::statusChanged, [this, installation, resource] (Transaction::Status status) {
+    connect(transaction, &DiscoverFlatpakTransaction::statusChanged, [this, installation, resource] (Transaction::Status status) {
         if (status == Transaction::Status::DoneStatus) {
             updateAppState(installation, resource);
         }
@@ -1241,9 +1241,9 @@ Transaction* FlatpakBackend::removeAppli
     }
 
     FlatpakInstallation *installation = resource->installation();
-    FlatpakTransaction *transaction = new FlatpakTransaction(resource, Transaction::RemoveRole);
+    DiscoverFlatpakTransaction *transaction = new DiscoverFlatpakTransaction(resource, Transaction::RemoveRole);
 
-    connect(transaction, &FlatpakTransaction::statusChanged, [this, installation, resource] (Transaction::Status status) {
+    connect(transaction, &DiscoverFlatpakTransaction::statusChanged, [this, installation, resource] (Transaction::Status status) {
         if (status == Transaction::Status::DoneStatus) {
             updateAppSize(installation, resource);
         }
diff -up discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.cpp.omv~ discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.cpp
--- discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.cpp.omv~	2018-06-13 23:08:59.371281954 +0200
+++ discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.cpp	2018-06-13 23:13:41.422266412 +0200
@@ -33,12 +33,12 @@ extern "C" {
 #include <glib.h>
 }
 
-FlatpakTransaction::FlatpakTransaction(FlatpakResource *app, Role role, bool delayStart)
-    : FlatpakTransaction(app, nullptr, role, delayStart)
+DiscoverFlatpakTransaction::DiscoverFlatpakTransaction(FlatpakResource *app, Role role, bool delayStart)
+    : DiscoverFlatpakTransaction(app, nullptr, role, delayStart)
 {
 }
 
-FlatpakTransaction::FlatpakTransaction(FlatpakResource *app, FlatpakResource *runtime, Transaction::Role role, bool delayStart)
+DiscoverFlatpakTransaction::DiscoverFlatpakTransaction(FlatpakResource *app, FlatpakResource *runtime, Transaction::Role role, bool delayStart)
     : Transaction(app->backend(), app, role, {})
     , m_app(app)
     , m_runtime(runtime)
@@ -47,11 +47,11 @@ FlatpakTransaction::FlatpakTransaction(F
     setStatus(QueuedStatus);
 
     if (!delayStart) {
-        QTimer::singleShot(0, this, &FlatpakTransaction::start);
+        QTimer::singleShot(0, this, &DiscoverFlatpakTransaction::start);
     }
 }
 
-FlatpakTransaction::~FlatpakTransaction()
+DiscoverFlatpakTransaction::~DiscoverFlatpakTransaction()
 {
     for(auto job : m_jobs) {
         if (!job->isFinished()) {
@@ -61,7 +61,7 @@ FlatpakTransaction::~FlatpakTransaction(
     }
 }
 
-void FlatpakTransaction::cancel()
+void DiscoverFlatpakTransaction::cancel()
 {
     Q_ASSERT(m_appJob);
     foreach (const QPointer<FlatpakTransactionJob> &job, m_jobs) {
@@ -70,18 +70,18 @@ void FlatpakTransaction::cancel()
     setStatus(CancelledStatus);
 }
 
-void FlatpakTransaction::setRuntime(FlatpakResource *runtime)
+void DiscoverFlatpakTransaction::setRuntime(FlatpakResource *runtime)
 {
     m_runtime = runtime;
 }
 
-void FlatpakTransaction::start()
+void DiscoverFlatpakTransaction::start()
 {
     setStatus(CommittingStatus);
     if (m_runtime) {
         QPointer<FlatpakTransactionJob> job = new FlatpakTransactionJob(m_runtime, {}, role());
-        connect(job, &FlatpakTransactionJob::finished, this, &FlatpakTransaction::onJobFinished);
-        connect(job, &FlatpakTransactionJob::progressChanged, this, &FlatpakTransaction::onJobProgressChanged);
+        connect(job, &FlatpakTransactionJob::finished, this, &DiscoverFlatpakTransaction::onJobFinished);
+        connect(job, &FlatpakTransactionJob::progressChanged, this, &DiscoverFlatpakTransaction::onJobProgressChanged);
         m_jobs << job;
 
         processRelatedRefs(m_runtime);
@@ -89,8 +89,8 @@ void FlatpakTransaction::start()
 
     // App job will be added everytime
     m_appJob = new FlatpakTransactionJob(m_app, {}, role());
-    connect(m_appJob, &FlatpakTransactionJob::finished, this, &FlatpakTransaction::onJobFinished);
-    connect(m_appJob, &FlatpakTransactionJob::progressChanged, this, &FlatpakTransaction::onJobProgressChanged);
+    connect(m_appJob, &FlatpakTransactionJob::finished, this, &DiscoverFlatpakTransaction::onJobFinished);
+    connect(m_appJob, &FlatpakTransactionJob::progressChanged, this, &DiscoverFlatpakTransaction::onJobProgressChanged);
     m_jobs << m_appJob;
 
     processRelatedRefs(m_app);
@@ -102,7 +102,7 @@ void FlatpakTransaction::start()
     }
 }
 
-void FlatpakTransaction::processRelatedRefs(FlatpakResource* resource)
+void DiscoverFlatpakTransaction::processRelatedRefs(FlatpakResource* resource)
 {
     g_autoptr(GPtrArray) refs = nullptr;
     g_autoptr(GError) error = nullptr;
@@ -139,8 +139,8 @@ void FlatpakTransaction::processRelatedR
             FlatpakRef *flatpakRef = FLATPAK_REF(g_ptr_array_index(refs, i));
             if (flatpak_related_ref_should_download(FLATPAK_RELATED_REF(flatpakRef))) {
                 QPointer<FlatpakTransactionJob> job = new FlatpakTransactionJob(resource, QPair<QString, uint>(QString::fromUtf8(flatpak_ref_get_name(flatpakRef)), flatpak_ref_get_kind(flatpakRef)), role());
-                connect(job, &FlatpakTransactionJob::finished, this, &FlatpakTransaction::onJobFinished);
-                connect(job, &FlatpakTransactionJob::progressChanged, this, &FlatpakTransaction::onJobProgressChanged);
+                connect(job, &FlatpakTransactionJob::finished, this, &DiscoverFlatpakTransaction::onJobFinished);
+                connect(job, &FlatpakTransactionJob::progressChanged, this, &DiscoverFlatpakTransaction::onJobProgressChanged);
                 // Add to the list of all jobs
                 m_jobs << job;
             }
@@ -148,7 +148,7 @@ void FlatpakTransaction::processRelatedR
     }
 }
 
-void FlatpakTransaction::onJobFinished()
+void DiscoverFlatpakTransaction::onJobFinished()
 {
     FlatpakTransactionJob *job = static_cast<FlatpakTransactionJob*>(sender());
 
@@ -175,7 +175,7 @@ void FlatpakTransaction::onJobFinished()
     finishTransaction();
 }
 
-void FlatpakTransaction::onJobProgressChanged(int progress)
+void DiscoverFlatpakTransaction::onJobProgressChanged(int progress)
 {
     Q_UNUSED(progress);
 
@@ -189,7 +189,7 @@ void FlatpakTransaction::onJobProgressCh
     setProgress(total / m_jobs.count());
 }
 
-void FlatpakTransaction::finishTransaction()
+void DiscoverFlatpakTransaction::finishTransaction()
 {
     if (m_appJob->result()) {
         AbstractResource::State newState = AbstractResource::None;
diff -up discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.h.omv~ discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.h
--- discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.h.omv~	2018-06-13 23:08:32.752283421 +0200
+++ discover-5.13.0/libdiscover/backends/FlatpakBackend/FlatpakTransaction.h	2018-06-13 23:08:57.798282041 +0200
@@ -33,14 +33,14 @@ extern "C" {
 
 class FlatpakResource;
 class FlatpakTransactionJob;
-class FlatpakTransaction : public Transaction
+class DiscoverFlatpakTransaction : public Transaction
 {
 Q_OBJECT
 public:
-    FlatpakTransaction(FlatpakResource *app, Role role, bool delayStart = false);
-    FlatpakTransaction(FlatpakResource *app, FlatpakResource *runtime, Role role, bool delayStart = false);
+    DiscoverFlatpakTransaction(FlatpakResource *app, Role role, bool delayStart = false);
+    DiscoverFlatpakTransaction(FlatpakResource *app, FlatpakResource *runtime, Role role, bool delayStart = false);
 
-    ~FlatpakTransaction();
+    ~DiscoverFlatpakTransaction();
 
     void cancel() override;
     void setRuntime(FlatpakResource *runtime);
